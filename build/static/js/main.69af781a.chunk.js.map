{"version":3,"sources":["rpe-calc.ts","RPECalc.tsx","serviceWorker.ts","index.tsx"],"names":["RPE","math","VALID_RPE","VALID_REPS","calc1RM","x","y","weight","percent","get","findPercentOf1RM","Math","round","mroundMatrix","matrix","roundTo","map","a","number","mround","createNewMatrixFrom1RM","oneRM","balanceRPEMatrix","RepsHeaders","style","textAlign","colSpan","length","float","type","onChange","this","props","onRoundChange","defaultValue","width","key","rep","React","PureComponent","SPECTRAL11","determineSpectralColor","idx","backgroundColor","color","RPEInput","node","value","String","n","onKeyDown","data-x","data-y","fontWeight","ref","RPECalc","state","rpeMatrix","event","preventDefault","target","Number","dataset","setState","toArray","row","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.69af781a.chunk.js","sourcesContent":["import * as math from \"mathjs\";\r\n\r\nexport const RPE = math.round(\r\n  math.multiply(\r\n    math.matrix([\r\n      [100, 95.5, 92.2, 89.2, 86.3, 83.7, 81.1, 78.6, 76.2, 73.9],\r\n      [97.8, 93.9, 90.7, 87.8, 85, 82.4, 79.9, 77.4, 75.1, 72.3],\r\n      [95.5, 92.2, 89.2, 86.3, 83.7, 81.1, 78.6, 76.2, 73.9, 70.7],\r\n      [93.9, 90.7, 87.8, 85, 82.4, 79.9, 77.4, 75.1, 72.3, 69.4],\r\n      [92.2, 89.2, 86.3, 83.7, 81.1, 78.6, 76.2, 73.9, 70.7, 68.0],\r\n      [90.7, 87.8, 85, 82.4, 79.9, 77.4, 75.1, 72.3, 69.4, 66.7],\r\n      [89.2, 86.3, 83.7, 81.1, 78.6, 76.2, 73.9, 70.7, 68.0, 65.3],\r\n      [87.8, 85, 82.4, 79.9, 77.4, 75.1, 72.3, 69.4, 66.7, 64],\r\n      [86.3, 83.7, 81.1, 78.6, 76.2, 73.9, 70.7, 68.0, 65.3, 62.6],\r\n      [85.0, 82.4, 79.9, 77.4, 75.1, 72.3, 69.4, 66.7, 64.0, 61.3],\r\n      [83.7, 81.1, 78.6, 76.2, 73.9, 70.7, 68.0, 65.3, 62.6, 59.9]\r\n    ]),\r\n    0.01\r\n  ),\r\n  3\r\n);\r\n\r\ntype Matrix = typeof RPE;\r\n\r\nexport const VALID_RPE = [10,9.5,9,8.5,8,7.5,7,6.5,6,5.5,5];\r\nexport const VALID_REPS = [1,2,3,4,5,6,7,8,9,10];\r\n\r\nfunction findPercentOf1RM(x:number,y:number){\r\n  return RPE.get([y,x]) as number;\r\n}\r\n\r\nfunction calc1RM(x:number,y:number,weight:number){\r\n  const percent = findPercentOf1RM(x,y);\r\n  return Math.round(weight/percent);\r\n}\r\n\r\nfunction mround(number:number, roundTo:number){\r\n  return roundTo * Math.round(number/roundTo);\r\n}\r\n\r\nfunction mroundMatrix(matrix:Matrix,roundTo:number){\r\n  return matrix.map(a => mround(a,roundTo));\r\n}\r\n\r\nfunction createNewMatrixFrom1RM(oneRM:number,roundTo:number = 1){\r\n  return mroundMatrix(math.multiply(RPE,oneRM),roundTo);\r\n}\r\n\r\nexport function balanceRPEMatrix(x:number,y:number,weight:number,roundTo:number = 1){\r\n  const oneRM = calc1RM(x,y,weight);\r\n  return createNewMatrixFrom1RM(oneRM,roundTo);\r\n}\r\n\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { VALID_RPE, VALID_REPS, RPE, balanceRPEMatrix } from \"./rpe-calc\";\n\ntype RepHeadersProps = {\n  roundTo: number;\n  onRoundChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\nclass RepsHeaders extends React.PureComponent<RepHeadersProps> {\n  render() {\n    return (\n      <thead>\n        <tr>\n          <td style={{ textAlign: \"center\" }} colSpan={VALID_REPS.length + 1}>\n            <strong>Number of Reps</strong>\n            <span style={{ float: \"right\" }}>\n              Round to the nearest{\" \"}\n              <input type=\"number\" onChange={this.props.onRoundChange} defaultValue={this.props.roundTo} />\n            </span>\n          </td>\n        </tr>\n        <tr>\n          <th style={{ width: 75 }} key=\"RPE\">\n            RPE\n          </th>\n          {VALID_REPS.map(rep => (\n            <th style={{ width: 75 }} key={rep}>\n              {rep}x\n            </th>\n          ))}\n        </tr>\n      </thead>\n    );\n  }\n}\n/**\n * From https://github.com/saikocat/colorbrewer/blob/master/index.js\n */\nconst SPECTRAL11 = [\n  \"#9e0142\",\n  \"#d53e4f\",\n  \"#f46d43\",\n  \"#fdae61\",\n  \"#fee08b\",\n  \"#ffffbf\",\n  \"#e6f598\",\n  \"#abdda4\",\n  \"#66c2a5\",\n  \"#3288bd\",\n  \"#5e4fa2\"\n];\n\nfunction determineSpectralColor(x: number, y: number) {\n  const idx = Math.round((x + y) / 2.2);\n  return {\n    backgroundColor: SPECTRAL11[idx],\n    color: idx < 3 || idx > 8 ? \"white\" : \"black\"\n  };\n}\n\ntype RPEInputProps = {\n  x: number;\n  y: number;\n  onKeyDown: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n  n: number;\n};\n\nclass RPEInput extends React.PureComponent<RPEInputProps> {\n  node: HTMLInputElement | null = null;\n  componentDidUpdate() {\n    if (this.node) {\n      this.node.value = String(this.props.n);\n    }\n  }\n  render() {\n    const { x, y, n, onKeyDown } = this.props;\n    return (\n      <input\n        data-x={x}\n        data-y={y}\n        onKeyDown={onKeyDown}\n        style={{ width: 75, fontWeight: 700, ...determineSpectralColor(x, y) }}\n        defaultValue={n}\n        ref={node => (this.node = node)}\n      />\n    );\n  }\n}\n\nclass RPECalc extends React.PureComponent {\n  state = {\n    rpeMatrix: RPE,\n    roundTo: 5\n  };\n  onKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key !== \"Enter\") return;\n    event.preventDefault();\n    const target = event.target as HTMLInputElement;\n    const x = Number(target.dataset.x);\n    const y = Number(target.dataset.y);\n    const weight = Number(target.value);\n    const rpeMatrix = balanceRPEMatrix(x, y, weight, this.state.roundTo);\n    this.setState({ rpeMatrix });\n  };\n  onRoundChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const target = event.target as HTMLInputElement;\n    const roundTo = Number(target.value);\n    this.setState({ roundTo });\n  };\n  render() {\n    const matrix = this.state.rpeMatrix.toArray() as number[][];\n    return (\n      <table>\n        <RepsHeaders roundTo={this.state.roundTo} onRoundChange={this.onRoundChange} />\n        <tbody>\n          {matrix.map((row, y) => {\n            return (\n              <tr key={`row-${y}`}>\n                <td style={{ textAlign: \"center\" }} key={VALID_RPE[y]}>\n                  {VALID_RPE[y]}\n                </td>\n                {row.map((n, x) => {\n                  return (\n                    <td key={`${x},${y}`}>\n                      <RPEInput x={x} y={y} n={n} onKeyDown={this.onKeyDown} />\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default RPECalc;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport RPECalc from './RPECalc';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <RPECalc />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}